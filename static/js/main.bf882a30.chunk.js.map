{"version":3,"sources":["components/Title.jsx","components/EmployeeRow.jsx","utils/API.js","components/SearchForm.jsx","App.js","serviceWorker.js","index.js"],"names":["styles","myJumbotron","backgroundColor","color","Title","id","className","style","EmployeeRow","props","class","tableStyle","text","textStyle","scope","src","alt","firstName","lastName","email","phone","axios","get","buttonsStyle","border","marginTop","inputStyle","width","marginLeft","SearchForm","htmlFor","value","search","onChange","handleInputChange","name","type","onSubmit","handleSubmit","onClick","sortByName","App","state","users","results","sorted","generateEmployees","API","then","response","setState","data","catch","err","console","log","event","target","handleSortByName","sortEl","sort","a","b","last","this","map","employee","first","picture","large","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bf882a30.chunk.js","sourcesContent":["import React from \"react\";\n\nconst styles = {\n  myJumbotron: {\n    backgroundColor: \"#AA9ABA\",\n    color: \"white\",\n  },\n};\n\nconst Title = () => {\n  return (\n    <div id=\"header\">\n      <div className=\"jumbotron jumbotron-fluid\" style={styles.myJumbotron}>\n        <div className=\"container\">\n          <h1 className=\"display-4\">Employee Directory</h1>\n          <p className=\"lead\">\n            Search or filter through the directory to see all employees.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Title;\n","import React from \"react\";\n// here we pass in the props (like attributes from JS)\nconst EmployeeRow = (props) => {\n\n  const styles = {\n    tableStyle: {\n      text: \"center\",\n    },\n  };\n\n  return (\n    <div className=\"container\">\n      <table class=\"table\" style={styles.textStyle}>\n        <thead>\n          <tr>\n            <th scope=\"col\">ID Picture</th>\n            <th scope=\"col\">\n                {/* <button>Name</button> */} Name\n            </th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">Phone</th>\n          </tr>\n        </thead>\n        <tbody>\n          {/* we need a row with all the information of each employee */}\n          <tr>\n            <td>\n              <img src={props.src} alt={props.firstName}></img>\n            </td>\n            <td>\n              {props.firstName} {props.lastName}\n            </td>\n            <td>{props.email}</td>\n            <td>{props.phone}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default EmployeeRow;\n","import axios from \"axios\";\n\nexport default {\n  getEmployees: function () {\n    return axios.get(\"https://randomuser.me/api/?results=25\");\n  },\n};\n","import React from \"react\";\n\nconst styles = {\n  buttonsStyle: {\n    backgroundColor: \"pink\",\n    border: \"2px solid #AA9ABA\",\n    color: \"black\",\n    marginTop: \"5px\",\n  },\n  inputStyle: {\n    width: \"50%\",\n    marginLeft: \"25%\"\n  },\n};\n\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction SearchForm(props) {\n  return (\n    <form className=\"search\">\n      <div className=\"form-group\">\n        <label htmlFor=\"search\">Search By Name</label>\n        <input\n          style={styles.inputStyle}\n          value={props.search}\n          onChange={props.handleInputChange}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          id=\"search\"\n        />\n        <button\n          style={styles.buttonsStyle}\n          type=\"submit\"\n          className=\"btn btn-success\"\n          onSubmit={props.handleSubmit}\n        >\n          Search\n        </button>\n        <br></br>\n        <button\n          type=\"button\"\n          style={styles.buttonsStyle}\n          className=\"btn btn-success\"\n          onClick={props.sortByName}\n        >\n          Sort By Last Name\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import \"./App.css\";\nimport Title from \"./components/Title\";\nimport EmployeeRow from \"./components/EmployeeRow\";\nimport API from \"./utils/API\";\nimport SearchForm from \"./components/SearchForm\";\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n  //this sets the state to an empty array of users\n  state = {\n    search: \"\",\n    users: [],\n    results: [],\n    sorted: \"ascending\",\n  };\n\n  //like document.ready, this will load the page with a list of randomly generated people\n  componentDidMount() {\n    this.generateEmployees();\n  }\n\n  generateEmployees = () => {\n    API.getEmployees()\n      .then((response) => this.setState({ users: response.data.results }))\n      .catch((err) => console.log(err));\n  };\n\n  handleInputChange = (event) => {\n    this.setState({ search: event.target.value });\n  };\n\n  handleSortByName = () => {\n    const sortEl = this.state.users;\n    if (this.state.sorted === \"ascending\") {\n      const sorted = sortEl.sort((a, b) =>\n        a.name.last > b.name.last ? 1 : -1\n      );\n      this.setState({\n        users: sorted,\n        sorted: \"descending\",\n      });\n    } else {\n      const sorted = sortEl.sort((a, b) =>\n        a.name.last > b.name.last ? -1 : 1\n      );\n      this.setState({\n        users: sorted,\n        sorted: \"ascending\",\n      });\n    }\n  };\n\n  // handleSubmit = (event) => {\n  //   event.preventDefault();\n  //   this.setState({ search: event.target.value });\n  // };\n  render() {\n    return (\n      <div className=\"App\">\n        <Title />\n        <SearchForm\n          // onChange={this.handleInputChange}\n          sortByName={this.handleSortByName}\n        />\n        {/* this renders the row and the information stored in the api JSON */}\n        {/* we need to map over all the users and display their information in a table */}\n        {this.state.users.map((employee) => (\n          <EmployeeRow\n            firstName={employee.name.first}\n            lastName={employee.name.last}\n            email={employee.email}\n            phone={employee.phone}\n            src={employee.picture.large}\n            // onClick={this.sortByName}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}